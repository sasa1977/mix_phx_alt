on: push

env:
  ELIXIR_VERSION: 1.13.1
  OTP_VERSION: 24.1.7
  CACHE_VERSION: 2

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      db:
        image: postgres:13-alpine
        ports: ["5432:5432"]
        env:
          POSTGRES_PASSWORD: postgres

    steps:
      - uses: actions/checkout@v2
      - uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}

      - name: Restore cache
        uses: actions/cache@v2
        id: cache
        with:
          path: |
            _build
            deps
            ~/.hex
            ~/.mix
          key: cache-v${{ env.CACHE_VERSION }}-${{ env.OTP_VERSION }}-${{ env.ELIXIR_VERSION }}-${{ hashFiles('mix.lock') }}
          restore-keys: |
            cache-v${{ env.CACHE_VERSION }}-${{ env.OTP_VERSION }}-${{ env.ELIXIR_VERSION }}-${{ hashFiles('mix.lock') }}
            cache-v${{ env.CACHE_VERSION }}-${{ env.OTP_VERSION }}-${{ env.ELIXIR_VERSION }}

      - run: mix deps.get

      - name: Compile
        run: MIX_ENV=test mix compile --warnings-as-errors

      - name: Run checks
        run: mix demo.run_ci_checks

      - name: Check OTP release
        run: |
          # generate config and load to env vars, so release can use the correct database
          set -a && source <(MIX_ENV=test mix run -e "IO.puts(Demo.Config.template())" | egrep "#.*=" | sed "s/# //")

          mix release --overwrite

          # reinitialize database to properly test migrations
          MIX_ENV=test mix do ecto.drop, ecto.create

          _build/prod/rel/demo/bin/migrate

          # check that the app can be successfully started
          _build/prod/rel/demo/bin/demo eval "{:ok, _} = Application.ensure_all_started(:demo)"
        shell: bash
